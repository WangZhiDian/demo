package com.demo.common.rest;import javax.servlet.ServletContext;import javax.servlet.http.HttpServletRequest;import javax.ws.rs.core.Context;import javax.ws.rs.core.Response;import javax.ws.rs.ext.ExceptionMapper;import javax.ws.rs.ext.Provider;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.demo.bussiness.Exception.exception.ExceptionCode;import com.demo.bussiness.Exception.exception.HeraRuntimeException;/** * provider,拦截程序抛出exception * 编写处理exception类，处理解析特定解析 */@Providerpublic class HeraExceptionMapper implements ExceptionMapper<Exception>{	private static Logger logger = LoggerFactory.getLogger(HeraExceptionMapper.class);		//private static final String CONTEXT_ATTRIBUTE = WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;  	@Context      private HttpServletRequest request;      @Context      private ServletContext servletContext;        /**      * 异常处理      *       * @param exception      * @return 异常处理后的Response对象      */      public Response toResponse(Exception exception) {      	logger.info("===HeraExceptionMapper.toResponse===");    	        String errorCode;        String errorMessage;        String referUrl;                // 处理unchecked exception  HeraRuntimeException        if(exception instanceof HeraRuntimeException) {          	HeraRuntimeException heraException = (HeraRuntimeException) exception;          	errorCode=heraException.getErrorCode();        	errorMessage=heraException.getErrorMessage();        	referUrl=heraException.getReferUrl();            RestResponse restResponse=new RestResponse();            restResponse.setErrorCode(errorCode);            restResponse.setErrorMessage(errorMessage);            restResponse.setReferUrl(referUrl);        	return Response.ok().entity(restResponse.toJSONString()).build();        	//WebApplicationContext context = (WebApplicationContext) servletContext.getAttribute(CONTEXT_ATTRIBUTE);        	//errorMessage = context.getMessage(code, values, exception.getMessage(), request.getLocale());          }else if(exception instanceof IllegalArgumentException){  // 处理 IllegalArgumentException        	errorCode=ExceptionCode.SYSTEM_INVALID_PARAM.getErrorCode();        	errorMessage=ExceptionCode.SYSTEM_INVALID_PARAM.getErrorMessage() + ": " + exception.getMessage();        	referUrl=ExceptionCode.SYSTEM_INVALID_PARAM.getReferUrl();                }else if(exception instanceof javax.ws.rs.ClientErrorException) {        	//针对客户端的请求异常，直接抛出异常的返回结果，不进行处理        	return ((javax.ws.rs.ClientErrorException) exception).getResponse();        }        else {  // 处理 其它没有定义在ExceptionEnum里面的异常        	errorCode=ExceptionCode.SYSTEM_UNDEFINEDE_EXECPTION.getErrorCode();        	errorMessage=ExceptionCode.SYSTEM_UNDEFINEDE_EXECPTION.getErrorMessage() + ": " + exception.getMessage();        	referUrl=ExceptionCode.SYSTEM_UNDEFINEDE_EXECPTION.getReferUrl();        }            // checked exception和unchecked exception均被记录在日志里          logger.error(errorCode, exception);                  RestResponse restResponse=new RestResponse();        restResponse.setErrorCode(errorCode);        restResponse.setErrorMessage(errorMessage);        restResponse.setReferUrl(referUrl);		        return Response.ok().entity(restResponse.toJSONString()).build();    }  }