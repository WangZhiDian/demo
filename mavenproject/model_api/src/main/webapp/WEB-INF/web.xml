<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" 
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>Archetype Created Web Application</display-name>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- 加载spring等配置，contextConfigLocation位多个的时候，param-value用逗号分隔 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-config.xml</param-value>
  </context-param>
  <!-- 加载logback日志 -->
  <context-param>
    <param-name>logbackConfigLocation</param-name>
    <param-value>classpath:logback.xml</param-value>
  </context-param>
  <!-- 在运行动态时，找到项目路径 -->
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>model_api</param-value>
  </context-param>

  <!-- spring 上下文加载监听器 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
<!--  <listener>
    <listener-class>cn.model.maven.listener.MyContextListener</listener-class>
  </listener>-->

  <!--处理中文乱码, code filter -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--哪个filter在前面，就像执行filterchain链中的哪个-->
  <filter>
    <filter-name>myFilterTwo</filter-name>
    <filter-class>cn.model.maven.filter.MyFilterTwo</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>myFilterTwo</filter-name>
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>
  <filter>
    <filter-name>myFilter</filter-name>
    <filter-class>cn.model.maven.filter.MyFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>myFilter</filter-name>
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>

  <!-- jersey-spring restful config -->
  <servlet>
    <servlet-name>jersey-servlet</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <!-- 方式一 packages：提供者和资源包的扫描的参数，通通过加载resources包形式，加载所有的resources资源
    （是使用默认的资源加载器加载，需要给出资源所在的package） -->
    <!-- 但是<param-name>的中间名称一定要是jersey.config.server.provider.packages，不要改变 ;-->
    <init-param>
      <param-name>jersey.config.server.provider.packages</param-name>
      <param-value>cn.model.api</param-value>
    </init-param>
    <!-- 是自己定义的资源加载器加载想要的资源，这样可控性比较强，但是<param-name>的中间名称一定要是javax.ws.rs.Application，不要改变 -->
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>cn.model.maven.commons.resource.APIApplication</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>jersey-servlet</servlet-name>
    <url-pattern>/rest/*</url-pattern>
  </servlet-mapping>

  <error-page>
    <error-code>404</error-code>
    <location>/404.jsp</location>
  </error-page>

  <!-- jndi config 数据源配置-->
<!--  <resource-ref>
    <res-ref-name>jdbc/TkPayDB</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>-->

</web-app>
