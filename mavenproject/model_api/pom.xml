<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。-->
    <parent>
        <!--被继承的父项目的构件标识符-->
        <artifactId>mavenproject</artifactId>
        <!--被继承的父项目的全球唯一标识符-->
        <groupId>cn.model.maven</groupId>
        <!--被继承的父项目的版本-->
        <version>1.0-SNAPSHOT</version>
    </parent>
    <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
    <modelVersion>4.0.0</modelVersion>

    <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app 如果没有，则继承父类属性-->
    <!--<groupId>asia.banseon</groupId>-->
    <!--构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。-->
    <artifactId>model_api</artifactId>
    <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->
    <packaging>war</packaging>
    <!--项目的名称, Maven产生的文档用-->
    <name>model_api Maven Webapp</name>
    <!--项目主页的URL, Maven产生的文档用-->
    <!--<url>http://www.baidu.com/banseon</url>-->
    <description>A maven project to study maven.</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。-->
    <dependencies>
        <dependency>
            <groupId>cn.model.maven</groupId>
            <artifactId>model_common</artifactId>
            <!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。-->
            <type>jar</type>
            <version>1.0-SNAPSHOT</version>

            <!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题-->
<!--            <exclusions>
                <exclusion>
                    <artifactId>spring-core</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>-->
        </dependency>
        <dependency>
            <groupId>cn.model.maven</groupId>
            <artifactId>model_domain</artifactId>
            <type>jar</type>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>cn.model.maven</groupId>
            <artifactId>model_dao</artifactId>
            <type>jar</type>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>cn.model.maven</groupId>
            <artifactId>model_service</artifactId>
            <type>jar</type>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <!--构建项目所需要的信息。参见build元素-->
    <build>
        <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->
        <finalName>model_api</finalName>
        <!--使用的插件列表 。-->
        <plugins>
            <!--插件在仓库里的group ID-->
            <plugin>
                <!--插件在仓库里的group ID-->
                <groupId>org.apache.maven.plugins</groupId>
                <!--插件在仓库里的artifact ID-->
                <artifactId>maven-war-plugin</artifactId>
                <!--被使用的插件的版本（或版本范围）-->
                <version>2.6</version>
            </plugin>


        </plugins>
        <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。-->
        <resources>
            <!--这个元素描述了项目相关或测试相关的所有资源路径-->
            <resource>
                <!--描述存放资源的目录，该路径相对POM路径-->
                <directory>src/main/resources</directory>
                <!--包含的模式列表，例如**/*.xml.-->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.vm</include>
                    <include>*.xml</include>
                </includes>
                <!--排除的模式列表--> <!--<excludes/>-->
                <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。-->
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>

    <!--在列的项目构建profile，如果被激活，会修改构建处理-->
    <profiles>
        <!--根据环境参数或命令行参数激活某个构建处理-->
        <!-- development -->
        <profile>
            <!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。-->
            <id>development</id>
            <!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。-->
            <activation>
                <!--profile默认是否激活的标志-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <!--当filtering开关打开时，使用到的过滤器属性文件列表-->
                <filters>
                    <filter>filter-dev.properties</filter>
                </filters>
            </build>
        </profile>
        <!-- test -->
        <profile>
            <id>test</id>
            <build>
                <filters>
                    <filter>filter-test.properties</filter>
                </filters>
            </build>
        </profile>
        <!-- production -->
        <profile>
            <id>production</id>
            <build>
                <filters>
                    <filter>filter-production.properties</filter>
                </filters>
            </build>
        </profile>
    </profiles>

</project>
